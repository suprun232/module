window.App = window.App || {};
window.App.features = window.App.features || {};
(function(App, $, ui, utils){
  function render($root){
    const state = App.store.get();
    const filters = ui.filters.create({
      tracks: state.tracks,
      onChange: ()=> table.refresh()
    });

    const $section = $('<section class="card">');
    const header = $(`
      <div class="actions" style="justify-content:space-between;margin-bottom:.5rem">
        <h2 style="margin:0">–†–µ–π—Å–∏</h2>
        <button class="btn" id="add">+ –î–æ–¥–∞—Ç–∏ —Ä–µ–π—Å</button>
      </div>
    `);
    $section.append(header, filters.$el);

    // ‚úÖ –•–æ—Å—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ, —è–∫–∏–π —É–∂–µ —É DOM
    const $tableHost = $('<div class="table-host" style="margin-top:.5rem;"></div>');
    $section.append($tableHost);
    $root.append($section);

    // –ö–æ–Ω—Ñ—ñ–≥ –∫–æ–ª–æ–Ω–æ–∫
    const columns = [
      { title:'‚Ññ', key:'no', sortKey:'no' },
      { title:'–ù–∞–ø—Ä—è–º–æ–∫', key:'direction' },
      { title:'–í—ñ–¥–ø—Ä.', key:'dep', sortKey:'dep' },
      { title:'–ü—Ä–∏–±.', key:'arr', sortKey:'arr' },
      { title:'–ú—ñ—Å—Ü–µ', key:'location' },
      { title:'–°—Ç–∞—Ç—É—Å', key:'status', sortKey:'status', render: r => utils.badge(r.status) },
      { title:'–î—ñ–ª—è–Ω–∫–∞', key:'segmentId' },
      { title:'–°—Ç–∞–Ω –∫–æ–ª—ñ—ó', key:'trackCond', render: r => {
          const c = App.store.getTrackCond(r.segmentId);
          if(c==='–ù–æ—Ä–º–∞') return `<span class="mark ok"></span> –ù–æ—Ä–º–∞`;
          if(c==='–†–µ–º–æ–Ω—Ç') return `<span class="mark danger"></span> –†–µ–º–æ–Ω—Ç`;
          return `<span class="mark warn"></span> –û–±–º–µ–∂–µ–Ω–Ω—è`;
        } 
      },
      { title:'–î—ñ—ó', key:'actions', render: r => `
          <div class="actions">
            <button class="btn btn--ghost" data-edit="${r.no}">‚úé</button>
            <button class="btn btn--ghost" data-del="${r.no}">üóë</button>
          </div>` }
    ];

    // ‚úÖ –ü–µ—Ä–µ–¥–∞—î–º–æ –†–ï–ê–õ–¨–ù–ò–ô –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const table = ui.Table($tableHost, {
      columns,
      getData: ({ sortKey, sortDir, page, pageSize }) => {
        const q = filters.get();
        return App.store.listTrains({ ...q, sortKey, sortDir, page, pageSize });
      },
      pageSize: 8
    });

    // –Ü–Ω–ª–∞–π–Ω-—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
    function enableInlineEdit(){
      $tableHost.find('tbody tr').each(function(){
        const $tr = $(this);
        const no = $tr.data('no'); if(!no) return;
        const $cell = $tr.children().eq(5); // –∫–æ–ª–æ–Ω–∫–∞ "–°—Ç–∞—Ç—É—Å"
        const current = $cell.text().trim();
        $cell.attr('tabindex','0').attr('role','button').attr('aria-label',`–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è ${no}`);
        $cell.off('click keypress').on('click keypress', function(e){
          if(e.type==='click' || e.key==='Enter' || e.key===' '){
            const sel = $(`
              <select>
                <option ${current==='–ó–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º'?'selected':''}>–ó–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º</option>
                <option ${current==='–ó–∞–ø—ñ–∑–Ω—é—î—Ç—å—Å—è'?'selected':''}>–ó–∞–ø—ñ–∑–Ω—é—î—Ç—å—Å—è</option>
                <option ${current==='–°–∫–∞—Å–æ–≤–∞–Ω–æ'?'selected':''}>–°–∫–∞—Å–æ–≤–∞–Ω–æ</option>
              </select>`);
            $cell.empty().append(sel);
            sel.focus();
            sel.on('change blur', function(){
              const val = $(this).val();
              try{
                App.store.updateTrain(no, { status: val });
                ui.toast.show(`–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ: ${no} ‚Üí ${val}`);
              }catch(err){ alert(err.message); }
              table.refresh(); enableInlineEdit();
            });
          }
        });
      });
    }

    // –î—ñ—ó
    $section.on('click', '[data-edit]', function(){
      const no = $(this).data('edit');
      const t = App.store.get().trains.find(x => x.no === no);
      openForm(t, (values, oldNo)=> {
        try{ App.store.updateTrain(oldNo, values); ui.toast.show('–†–µ–π—Å –æ–Ω–æ–≤–ª–µ–Ω–æ'); table.refresh(); enableInlineEdit(); }
        catch(err){ alert(err.message); }
      });
    });
    $section.on('click', '[data-del]', function(){
      const no = $(this).data('del');
      if(confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ ${no}?`)){ App.store.removeTrain(no); ui.toast.show('–í–∏–¥–∞–ª–µ–Ω–æ'); table.refresh(); enableInlineEdit(); }
    });
    $section.find('#add').on('click', function(){
      openForm(null, (values)=>{ 
        try{ App.store.addTrain(values); ui.toast.show('–†–µ–π—Å –¥–æ–¥–∞–Ω–æ'); table.refresh(); enableInlineEdit(); }
        catch(err){ alert(err.message); }
      });
    });

    App.store.subscribe(()=>{ table.refresh(); enableInlineEdit(); });
    enableInlineEdit();
  }

  function openForm(data, onSubmit){
    const isEdit = !!data;
    const html = $(`
      <form class="grid" style="grid-template-columns:1fr 1fr;gap:.75rem" autocomplete="off">
        <div style="grid-column:1 / -1">
          <label>‚Ññ —Ä–µ–π—Å—É *</label>
          <input name="no" required placeholder="IC123" value="${data?data.no:''}">
        </div>
        <div style="grid-column:1 / -1">
          <label>–ù–∞–ø—Ä—è–º–æ–∫ *</label>
          <input name="direction" required placeholder="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ ‚Üí –ü—ñ–≤–¥–µ–Ω–Ω–∞" value="${data?data.direction:''}">
        </div>
        <div>
          <label>–í—ñ–¥–ø—Ä. (HH:MM) *</label>
          <input name="dep" required placeholder="07:10" value="${data?data.dep:''}">
        </div>
        <div>
          <label>–ü—Ä–∏–±. (HH:MM) *</label>
          <input name="arr" required placeholder="09:40" value="${data?data.arr:''}">
        </div>
        <div style="grid-column:1 / -1">
          <label>–ü–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ü–µ *</label>
          <input name="location" required placeholder="–°—Ç–∞–Ω—Ü—ñ—è D / –î—ñ–ª—è–Ω–∫–∞ B‚ÄìC" value="${data?data.location:''}">
        </div>
        <div>
          <label>–°—Ç–∞—Ç—É—Å</label>
          <select name="status">
            <option ${data&&data.status==='–ó–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º'?'selected':''}>–ó–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º</option>
            <option ${data&&data.status==='–ó–∞–ø—ñ–∑–Ω—é—î—Ç—å—Å—è'?'selected':''}>–ó–∞–ø—ñ–∑–Ω—é—î—Ç—å—Å—è</option>
            <option ${data&&data.status==='–°–∫–∞—Å–æ–≤–∞–Ω–æ'?'selected':''}>–°–∫–∞—Å–æ–≤–∞–Ω–æ</option>
          </select>
        </div>
        <div>
          <label>–î—ñ–ª—è–Ω–∫–∞</label>
          <select name="segmentId">
            ${App.store.listTracks().map(t=>`<option value="${t.id}" ${data&&data.segmentId===t.id?'selected':''}>${t.name}</option>`).join('')}
          </select>
        </div>
        <div style="grid-column:1 / -1" class="actions">
          <button class="btn" type="submit">–ó–±–µ—Ä–µ–≥—Ç–∏</button>
          <button class="btn btn--ghost" type="button" data-cancel>–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
        </div>
      </form>
    `);
    html.on('click','[data-cancel]', ()=>App.ui.modal.close());
    html.on('submit', function(e){
      e.preventDefault();
      const f = Object.fromEntries(new FormData(this).entries());
      if(!window.App.utils.requireFields(f,['no','direction','dep','arr','location','status','segmentId'])){ alert('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ –ø–æ–ª—è'); return; }
      if(!window.App.utils.isValidTime(f.dep) || !window.App.utils.isValidTime(f.arr)){ alert('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É'); return; }
      onSubmit(f, data ? data.no : null);
      App.ui.modal.close();
    });
    App.ui.modal.open({ title: isEdit?'–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–µ–π—Å—É':'–ù–æ–≤–∏–π —Ä–µ–π—Å', content: html });
  }

  App.features.trains = { render };
})(window.App, jQuery, window.App.ui, window.App.utils);
